name: Deploy-Master
  # Trigger analysis when pushing in master
  # Trigger Build when pushing in master
  # Trigger Test when pushing in master
  # Trigger Deploy when pushing in master
on:
  push:
    branches:
      # Only deploy on master
      - master
jobs:
  test_build: # Here we define the name of the job, github actions creates a uid for us
    runs-on: ubuntu-latest # We could run on any OS using Matrix os
    env:
      DB_DATABASE: testdb
      DB_USER: root
      DB_PASSWORD: "root"
      DB_HOST: localhost
      # Set our asp.net environment
      ASPNETCORE_ENVIRONMENT: Development

    steps:
      # Ubuntu has MySql by default, we just need to start it
      - name: Start MySQL
        run:  sudo /etc/init.d/mysql start

      # check out code from github
      - name: Checkout code
        uses: actions/checkout@v2

      # Run database scripts after we checkout code
      - name: Create DB, run SQL script
        run: |
          mysql -e 'CREATE DATABASE testdb;' -uroot -proot
          mysql -e 'SHOW DATABASES;' -uroot -proot
          mysql  -uroot -proot < "setup.sql"

      # Install dotnet 6 RC latest
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          include-prerelease: true

      # Restore dependencies
      - name: Restore dependencies
        run:  dotnet restore
      # Build the project
      - name: Build
        run: dotnet build --no-restore
      # Run tests
      - name: Test
        run: dotnet test --no-build --verbosity normal

      # Get our repository secrets and inject them into our settings files
      # Database connection string, user name, passwords, keys, etc
      - name: Substitute variables in appsettings.json & docker files
        uses: microsoft/variable-substitution@v1
        with:
         files: './src/MyAPI/appsettings.json, ./src/MyAPI/docker-compose.prod.mysql.yml'
        env:
          Jwt.Key:  ${{ secrets.JWT_KEY }}
          Jwt.Issuer:  ${{ secrets.JWT_ISSUER }}
          ConnectionStrings.MySqlDB: ${{ secrets.CONNECTIONSTRING }}
          services.database.environment.MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          services.database.environment.MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          services.database.environment.MYSQL_USER: ${{ secrets.MYSQL_USER }}
          services.database.environment.MYSQL_DATABASE:  ${{ secrets.MYSQL_DATABASE }}

      # Run docker build
      - name: Test Docker
        run: |
            cd src/MyAPI/
            docker-compose -f docker-compose.prod.mysql.yml up --build -d

      # Wait for the container
      - name: Sleep
        uses: jakejarvis/wait-action@master
        with:
         time: '30s'

      # Test if containers are running
      - name: Check running containers
        run: docker ps

      # Sync files to server
      - name: Rsync - copy/update files
        uses: up9cloud/action-rsync@v1.1
        env:
            HOST: imgloader.co.uk
            KEY: ${{secrets.PRIVATE_KEY}}
            TARGET: /scp/

            VERBOSE: true
            USER:  ${{ secrets.USERNAME}}
            # PORT: 2222 # no need to set this, because of $SSH_ARGS
            ARGS: -az --exclude=/.git/
            SSH_ARGS: '-p 22 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
            SOURCE: ./src/

            PRE_SCRIPT: |
              echo start at:
              date -u --rfc-3339=ns
            POST_SCRIPT: "echo done at: && date -u --rfc-3339=ns"

      # Run docker compose locally on remote server
      - name: Run docker-compose via SSH
        uses: garygrossgarten/github-action-ssh@2b10f41b5a33808f6d24eafd253296766308b7c4
        with:
          command: |
                cd scp/MyAPI
                docker-compose -f docker-compose.prod.yml up --build -d
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME}}
          privateKey: ${{ secrets.PRIVATE_KEY}}

      # Run post deployment tasks
      - name: Post Deployment Curl Test
        uses: wei/curl@v1
        with:
          args: -X GET https://imgloader.co.uk/api/Products/1