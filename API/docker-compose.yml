# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP .NET Core service.

version: '3.4'

#create a volume for the my sql container.To ensure Data persists after my sql container is stopped
volumes:
  datafiles:

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - node-exporter
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
    depends_on:
     - reverseproxy
  # reverse proxy
  reverseproxy:
    build:
      context: ./nginx
      dockerfile: Nginx.Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: always

  #DataBase Service
  database:
    #Pull the latest mysql image
    image: mysql:8.0.26
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    #Map port 3306 on the mysql container to port 3306 in the host
    ports:
      - "3306:3306"
    #Specify where the persisted Data should be stored
    volumes:
      - ./sql-scripts:/docker-entrypoint-initdb.d/
    restart: unless-stopped
    #Specify Environment Variables for mysql
    environment:
      MYSQL_ROOT_PASSWORD: Root0++
      MYSQL_USER: newuser
      MYSQL_PASSWORD: M0use!in99
      MYSQL_DATABASE: Usersdb
  #Api  Service
  api:
    build:
      context: .
      #Use the DockerFile in that Directory
      dockerfile: Dockerfile
    #This Service Depends on the database service specifed above
    depends_on:
      - database
      - reverseproxy
    #Map port 8888 in the docker container to port 80 in the Api
    # ports:
    #      - "80:80"
    #      - "443:443"
    restart: always
    #Specify Environment Variables for the Api Service
    environment:
      - DBHOST=database
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
